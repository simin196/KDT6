#--------------------------------------------------------------------------
# 문자열 str 데이터 다루기 
#--------------------------------------------------------------------------

## 여러줄 문자열 ==> ''' ''' 또는 """ """

msg = '''
오늘은 

좋은날
기쁜날

'''

print(f'msg => {msg}')

## 인덱싱 : 문자열 안에 문자 한개 한개를 식별하는 방법
# - 원소/요소 : 문자열 안에 문자 1개
# - 문법 : 변수명[인덱스], 문자열 데이터[인덱스]
# - 종류 : 2가지
#       왼 >>>>> 오 : 0, 1, 2, ...
#       왼 <<<<< 오 : ..., -2, -1
#--------------------------------------------------------------------------

msg = 'Good Luck!'
msg2= ''

# 빈 문자열에는 인덱스 출력할수 없음
# print(msg2[0]) >>> ERROR

# 문자열 전체 출력
print(msg)

# 문자열 내 원소 출력
print(msg[0]) ; print(msg[-2])

# 원소/요소의 갯수를 파악해주는 내장함수 len()
# - 원소/요소를 가지고있는 데이터 타입에만 사용가능

print(len(msg))

# 제일 마지막 원소/요소만 출력
print(msg[3], msg[len(msg)-1], msg[-1] )

data='Happy New Year 2025! Good Luck'

print(f'인덱스 범위: 0 ~ {len(data)-1}')

#2025! 만 따로 뽑기, 인덱싱 사용해서
print(data[15], data[16], data[17], data[18], data[19], sep='')
print(data[15:20])

#--------------------------------------------------------------------------

## 슬라이싱 : 문자열 내에 연속된 요소/원소 추출 방법
# - 문법 : 변수명[시작: 끝+1] 시작 인덱스 이상 ~ 끝 인덱스 미만

#--------------------------------------------------------------------------

#슬라이싱 이용 [시작 이상 : 끝 미만]
print(data[15:20])

#--------------------------------------------------------------------------

data2= 'Life is too short, You need python'

# Life만 출력
print(data2[0:4], data2[:4])

# You need python 출력
print(data2[-15:], data2[19:35])

# 변수명[ : ] : 처음부터 끝까지 의미
print(msg[:])

#--------------------------------------------------------------------------

## 슬라이싱 : 문자열 내에 연속된 요소/원소 추출 방법
# - 문법 : 변수명[시작 : 끝+1 : 간격] 

#--------------------------------------------------------------------------

data='12345789'

# 2,4,6,8만 축출
print(data[1], data[3], data[5], data[7])

# 인덱스가 2칸씩 증가 (규칙)
print(data[1:8:2])
print(data[1::2]) # 끝은 생략가능

data = 'ABC1DEF2GHI3JKL4MNO5PQR6STU'
# 문자열에 숫자 요소만 추출해주세요
print(data[3:len(data):4])